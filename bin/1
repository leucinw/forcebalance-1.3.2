lxml module import failed (You can't use OpenMM or XML force fields)
# ForceBalance input file generated by MakeInputFile.py
# The octothorpe '#' is a comment symbol
# There are two sections, the main options ($options) and the target options ($target)
# A ForceBalance calculation will have one $options section and as one $target section per optimization target
# The most important options are listed at the top; options are also roughly grouped by their application
# Note: If the specified value is 'None' then the option will truly be set to None - not the string 'None'
# Note: Section option types are more complicated and may require you to read the documentation
# Note: Boolean option types require no value, the key being present implies 'True'
# Note: List option types are specified using spaces as the delimiter - i.e. forcefield ff1.itp ff2.itp ; delete empty brackets before use [] 

$options

# (list) The names of force fields, corresponding to directory forcefields/file_name.(itp,xml,prm,frcmod,mol2)
# used in: All (important)
forcefield []

# (allcap) The calculation type, defaults to a single-point evaluation of objective function.
# used in: All (important); choose "single", "gradient", "hessian", "newton" (Main Optimizer), "bfgs", "powell", "simplex", "anneal", "genetic", "conjugategradient", "scan_mvals", "scan_pvals", "fdcheck[gh]"
jobtype single

# (int) The number of convergence criteria that must be met for main optimizer to converge
# used in: Main Optimizer
criteria 1

# (section) Paste priors into the input file for them to be read in directly
# used in: Scaling and regularization of parameters (important)
priors OrderedDict()

# (bool) Set to false to suppress printing options that are equal to their defaults
# used in: Printing output
verbose_options 0

# (bool) Continue the current run from where we left off (supports mid-iteration recovery).
# used in: Main Optimizer
continue 0

# (float) Convergence criterion of gradient norm
# used in: Main Optimizer
convergence_gradient 0.001

# (float) Convergence criterion of objective function (in MainOptimizer this is the stdev of X2 over [objective_history] steps)
# used in: Main Optimizer
convergence_objective 0.0001

# (float) Convergence criterion of step size (just needs to fall below this threshold)
# used in: Main Optimizer
convergence_step 0.0001

# (string) Directory containing force fields, relative to project directory
# used in: All
ffdir forcefield

# (bool) Normalize the weights for the fitting targets
# used in: Objective function (all calculations)
normalize_weights 1

# (string) Type of the penalty, L2 or Hyp in the optimizer
# used in: All optimizations
penalty_type L2

# (section) Paste mathematical parameters into the input file for them to be read in directly
# used in: Restarting an optimization
read_mvals None

# (section) Paste physical parameters into the input file for them to be read in directly
# used in: Restarting an optimization (recommend use_mvals instead)
read_pvals None

# (float) Levenberg-Marquardt trust radius; set to negative for nonlinear search
# used in: Main Optimizer
trust0 0.1

# (string) Path for GROMACS executables (if not the default)
# used in: All targets that use GROMACS (AbInitio_GMX, BindingEnergy_GMX, Interaction_GMX, Lipid_GMX, Liquid_GMX, Moments_GMX, Thermo_GMX, Vibration_GMX)
gmxpath 

# (string) The suffix of GROMACS executables
# used in: All targets that use GROMACS (AbInitio_GMX, BindingEnergy_GMX, Interaction_GMX, Lipid_GMX, Liquid_GMX, Moments_GMX, Thermo_GMX, Vibration_GMX)
gmxsuffix 

# (string) Path & File for TINKER multiple-node running
# used in: All targets that use TINKER (AbInitio_TINKER, BindingEnergy_TINKER, Interaction_TINKER, Liquid_TINKER, Moments_TINKER, Vibration_TINKER)
liquid_node example.node

# (string) Path for TINKER executables (if not the default)
# used in: All targets that use TINKER (AbInitio_TINKER, BindingEnergy_TINKER, Interaction_TINKER, Liquid_TINKER, Moments_TINKER, Vibration_TINKER)
tinkerpath /home/liuchw/Softwares/tinkers/tinker-7.1/source

# (float) Factor for additive penalty function in objective function
# used in: Objective function, all penalty types
penalty_additive 0.0

# (float) Factor for multiplicative penalty function in objective function
# used in: Objective function, all penalty types
penalty_multiplicative 0.0

# (float) Cusp region for hyperbolic constraint; for x=0, the Hessian is a/2b
# used in: Penalty type L1
penalty_hyperbolic_b 1e-06

# (float) Extra parameter for fusion penalty function.  Dictates position of log barrier or L1-L0 switch distance
# used in: Objective function, FUSION_BARRIER or FUSION_L0 penalty type, advanced usage in basis set optimizations
penalty_alpha 0.001

# (float) Step size for finite difference derivatives in many functions
# used in: pretty much everywhere
finite_difference_h 0.001

# (int) Maximum number of steps in an optimization
# used in: Main Optimizer
maxstep 100

# (float) Make sure that the finite difference step size does not exceed this multiple of the trust radius.
# used in: Main Optimizer
finite_difference_factor 0.1

# (int) Number of good optimization steps to average over when checking the objective convergence criterion
# used in: Main Optimizer (jobtype "newton")
objective_history 2

# (bool) Print the objective function gradient at every step
# used in: Main Optimizer
print_gradient 1

# (bool) Print the objective function Hessian at every step
# used in: Main Optimizer
print_hessian 0

# (bool) Print the mathematical and physical parameters at every step
# used in: Main Optimizer
print_parameters 1

# (float) Damping factor that ties down the trust radius to trust0; decrease for a more variable step size.
# used in: Main Optimizer
adaptive_damping 0.5

# (float) The step size is increased / decreased by up to this much in the event of a good / bad step; increase for a more variable step size.
# used in: Main Optimizer
adaptive_factor 0.25

# (bool) Write temp directories to backup before wiping them
backup 1

# (bool) Specify whether to constrain the charges on the molecules.
# used in: Printing the force field (all calculations)
constrain_charge 0

# (float) Minimum eigenvalue for applying steepest descent correction
# used in: Main Optimizer
eig_lowerbound 0.0001

# (float) Error tolerance; the optimizer will only reject steps that increase the objective function by more than this number.
# used in: Main Optimizer
error_tolerance 0.0

# (float) Minimum trust radius (if the trust radius is tiny, then noisy optimizations become really gnarly)
# used in: Main Optimizer
mintrust 0.0

# (float) Optimization will "fail" if step falls below this size
# used in: Main Optimizer
step_lowerbound 1e-06

# (float) Guess value for bracketing line search in trust radius algorithm
# used in: Main Optimizer
lm_guess 1.0

# (string) The AMOEBA polarization type, either direct, mutual, or nonpolarizable.
# used in: Targets in OpenMM / TINKER that use the AMOEBA force field (AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_OpenMM, BindingEnergy_TINKER, Hydration_OpenMM, Interaction_OpenMM, Interaction_TINKER, Liquid_OpenMM, Liquid_TINKER, Moments_OpenMM, Moments_TINKER, Vibration_TINKER)
amoeba_pol None

# (bool) Execute Work Queue tasks and local calculations asynchronously for improved speed
# used in: Targets that use Work Queue (advanced usage)
asynchronous 0

# (bool) Re-evaluate the objective function and gradients when the step is rejected (for noisy objective functions).
# used in: Main Optimizer
reevaluate None

# (int) The port number to use for Work Queue
# used in: Targets that use Work Queue (advanced usage)
wq_port 0

# (int) Set to a nonnegative number to turn on zero gradient skipping at that optimization step.
# used in: All
zerograd -1
# (string) Path to AMBER installation directory (leave blank to use AMBERHOME environment variable.
# used in: Targets that use AMBER (AbInitio_AMBER, Interaction_AMBER, Vibration_AMBER)
amberhome None

# (float) The AMOEBA mutual polarization criterion.
# used in: Targets in OpenMM / TINKER that use the AMOEBA force field (AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_OpenMM, BindingEnergy_TINKER, Hydration_OpenMM, Interaction_OpenMM, Interaction_TINKER, Liquid_OpenMM, Liquid_TINKER, Moments_OpenMM, Moments_TINKER, Vibration_TINKER)
amoeba_eps None

# (float) Search tolerance; used only when trust radius is negative, dictates convergence threshold of nonlinear search.
# used in: Main Optimizer with negative mintrust; advanced usage
search_tolerance 0.0001

# (int) Specify the nonbonded cutoff for AMBER engine in Angstrom (I should port this to other engines too.)
# used in: AMBER targets, especially large nonperiodic systems (AbInitio_AMBER, Interaction_AMBER, Vibration_AMBER)
amber_nbcut 9999

# (bool) Write the checkpoint file at every optimization step
writechk_step 1

# (bool) Allow convergence on "low quality" steps
lq_converge 1

# (string) Name of the restart file we read from
# used in: Restart jobtype "newton" with "writechk" set
readchk None

# (string) Name of the restart file we write to (can be same as readchk)
# used in: Main optimizer
writechk None

# (string) Values to scan in the parameter space, given like this: -0.1:0.1:11
# used in: Job types scan_mvals and scan_pvals
scan_vals None

# (list) Parameter name to scan over (should convert to a numerical index)
# used in: Job types scan_mvals and scan_pvals
scanindex_name []

# (list) Numerical index of the parameter to scan over
# used in: Job types scan_mvals and scan_pvals
scanindex_num []

# (bool) Specify whether there are virtual sites in the simulation (being fitted or not).  Enforces calculation of vsite positions.
# used in: Experimental feature in ESP fitting (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
have_vsite 0

# (bool) Perform calculations using rigid water molecules.
# used in: Currently used in AMOEBA parameterization (advanced usage) (AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_OpenMM, BindingEnergy_TINKER, Hydration_OpenMM, Interaction_OpenMM, Interaction_TINKER, Liquid_OpenMM, Liquid_TINKER, Moments_OpenMM, Moments_TINKER, Vibration_TINKER)
rigid_water 0

# (bool) Generate bonds from virtual sites to host atom bonded atoms.
# used in: Currently used in AMOEBA parameterization (advanced usage) (AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_OpenMM, BindingEnergy_TINKER, Hydration_OpenMM, Interaction_OpenMM, Interaction_TINKER, Liquid_OpenMM, Liquid_TINKER, Moments_OpenMM, Moments_TINKER, Vibration_TINKER)
vsite_bonds 0

# (bool) Allow duplicate parameter names (only if you know what you are doing!
# used in: Force Field Parser
duplicate_pnames 0

# (bool) Optimize in the space of log-variables
# used in: Creating the force field (all calculations, advanced usage)
logarithmic_map 0

# (bool) Bypass the transformation matrix and use the physical parameters directly
# used in: Creating the force field; advanced usage, be careful.
use_pvals 0

# (int) Number of beads in ring polymer MD (zero to disable)
# used in: Condensed phase property targets (advanced usage) (Liquid_OpenMM)
rpmd_beads 0
$end


$target

# (allcap) The type of fitting target, for instance AbInitio_GMX ; this must correspond to the name of a Target subclass.
# used in: All targets (important) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_GMX, BindingEnergy_OpenMM, BindingEnergy_TINKER, Counterpoise, Hydration_OpenMM, Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER, Lipid_GMX, Liquid_GMX, Liquid_OpenMM, Liquid_TINKER, Moments_GMX, Moments_OpenMM, Moments_TINKER, RDVR3_Psi4, RemoteTarget, THCDF_Psi4, Thermo_GMX, Vibration_AMBER, Vibration_GMX, Vibration_TINKER)
type None

# (list) The name of the target, corresponding to the directory targets/name ; may provide a list if multiple targets have the same settings
# used in: All targets (important)
name []

# (allcap) The external code used to execute the simulations (GMX, TINKER, AMBER, OpenMM)
# used in: All targets (important) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER, BindingEnergy_GMX, BindingEnergy_OpenMM, BindingEnergy_TINKER, Counterpoise, Hydration_OpenMM, Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER, Lipid_GMX, Liquid_GMX, Liquid_OpenMM, Liquid_TINKER, Moments_GMX, Moments_OpenMM, Moments_TINKER, RDVR3_Psi4, RemoteTarget, THCDF_Psi4, Thermo_GMX, Vibration_AMBER, Vibration_GMX, Vibration_TINKER)
engine None

# (float) Weight of the target (determines its importance vs. other targets)
# used in: All targets (important)
weight 1.0

# (list) List of quantities to be fitted, each must have corresponding Quantity subclass
# used in: Thermodynamic properties target (Thermo_GMX)
quantities []

# (string) Provide a temporary directory ".tmp" to read data from a previous calculation on the initial iteration (for instance, to restart an aborted run).
# used in: Liquid and Remote targets ()
read None

# (bool) Adapt to simulation uncertainty by combining property estimations and adjusting simulation length.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
adapt_errors 0

# (bool) Evaluate target as a remote work_queue task
# used in: All targets (optional)
remote 0

# (string) Specify an optional prefix script to run in front of rtarget.py, for loading environment variables
# used in: Remote targets (RemoteTarget)
remote_prefix 

# (float) Dipole normalization (Debye) ; set to 0 if a zero weight is desired
# used in: Monomer property targets ()
dipole_denom 1.0

# (string) Name of the barostat to use for equilibration.
# used in: Condensed phase property targets, Gromacs only ()
gmx_eq_barostat berendsen

# (int) Set the number of threads used by Gromacs or TINKER processes in MD simulations
# used in: Condensed phase properties in GROMACS and TINKER ()
md_threads 1

# (float) Dipole polarizability tensor normalization (cubic Angstrom) ; set to 0 if a zero weight is desired
# used in: Monomer property targets with polarizability ()
polarizability_denom 1.0

# (float) Quadrupole normalization (Buckingham) ; set to 0 if a zero weight is desired
# used in: Monomer property targets ()
quadrupole_denom 1.0

# (float) Weight of thermal expansion coefficient
# used in: Condensed phase property targets ()
w_alpha 1.0

# (float) Weight of isobaric heat capacity
# used in: Condensed phase property targets ()
w_cp 1.0

# (float) Weight of dielectric constant
# used in: Condensed phase property targets ()
w_eps0 1.0

# (float) Weight of enthalpy of vaporization
# used in: Condensed phase property targets ()
w_hvap 1.0

# (float) Weight of isothermal compressibility
# used in: Condensed phase property targets ()
w_kappa 1.0

# (bool) Normalize the condensed phase property contributions to the liquid / lipid property target
# used in: Condensed phase property targets ()
w_normalize 0

# (float) Weight of experimental density
# used in: Condensed phase property targets ()
w_rho 1.0

# (bool) Enable the energy objective function
# used in: All ab initio targets (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
energy 1

# (string) Number of fitting atoms; defaults to all of them.  Use a comma and dash style list (1,2-5), atoms numbered from one, inclusive
# used in: Energy + Force Matching (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
fitatoms 0

# (bool) Enable the force objective function
# used in: All ab initio targets (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
force 1

# (string) The resolution of mapping interactions to net forces and torques for groups of atoms.  In order of resolution: molecule > residue > charge-group
# used in: Force Matching (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
force_map residue

# (int) Number of snapshots; defaults to all of the snapshots
# used in: Energy + Force Matching (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
shots -1

# (float) Weight of net forces (condensed to molecules, residues, or charge groups)
# used in: Ab initio targets (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
w_netforce 0.0

# (float) Weight of torques (condensed to molecules, residues, or charge groups)
# used in: Ab initio targets (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
w_torque 0.0

# (int) Affects the amount of data being printed to the temp directory.
# used in: Energy + Force Matching (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
writelevel 0

# (float) Energy normalization for binding energies in kcal/mol (default is to use stdev)
# used in: Binding energy targets (BindingEnergy_GMX, BindingEnergy_OpenMM, BindingEnergy_TINKER)
energy_denom 1.0

# (string) Text file containing interacting systems.  If not provided, will search for a default.
# used in: Binding energy target (BindingEnergy_GMX, BindingEnergy_OpenMM, BindingEnergy_TINKER)
inter_txt interactions.txt

# (float) RMSD normalization for optimized geometries in Angstrom
# used in: Binding energy targets (BindingEnergy_GMX, BindingEnergy_OpenMM, BindingEnergy_TINKER)
rmsd_denom 0.1

# (string) Text file containing experimental data.
# used in: Hydration free energy target (Hydration_OpenMM)
hfedata_txt hfedata.txt

# (string) Method for calculating hydration energies (single point, FEP, TI).
# used in: Hydration free energy target (Hydration_OpenMM)
hfemode single
# (string) Specify a subset of molecules to fit.  The rest are used for cross-validation.
# used in: Hydration free energy target (Hydration_OpenMM)
subset None

# (bool) Normalize interaction energies using 1/(denom**2 + reference**2) only for repulsive interactions greater than denom.
# used in: Interaction energy targets (Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER)
attenuate 0

# (bool) Normalize interaction energies each using 1/(denom**2 + reference**2) which resembles a Cauchy distribution
# used in: Interaction energy targets (Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER)
cauchy 0

# (float) Upper energy cutoff (in kcal/mol); super-repulsive interactions are given zero weight
# used in: Interaction energy targets (Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER)
energy_upper 30.0

# (string) Interaction fragment 1: a selection of atoms specified using atoms and dashes, e.g. 1-6 to select the first through sixth atom (i.e. list numbering starts from 1)
# used in: Interaction energies (Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER)
fragment1 

# (string) Interaction fragment 2: a selection of atoms specified using atoms and dashes, e.g. 7-11 to select atoms 7 through 11.
# used in: Interaction energies (Interaction_AMBER, Interaction_GMX, Interaction_OpenMM, Interaction_TINKER)
fragment2 

# (string) Provide file name for lipid coordinates.
# used in: Condensed phase properties (Lipid_GMX)
lipid_coords None

# (int) Number of time steps for the lipid equilibration run.
# used in: Condensed phase property targets (Lipid_GMX)
lipid_eq_steps 1000

# (float) Time interval for saving coordinates for the lipid production run.
# used in: Lipid property targets (Lipid_GMX)
lipid_interval 0.1

# (int) Number of time steps for the lipid production run.
# used in: Condensed phase property targets (Lipid_GMX)
lipid_md_steps 10000

# (float) Time step size for the lipid simulation.
# used in: Lipid property targets (Lipid_GMX)
lipid_timestep 1.0

# (float) Weight of average area per lipid
# used in: Lipid property targets (Lipid_GMX)
w_al 1.0

# (float) Weight of deuterium order parameter
# used in: Lipid property targets (Lipid_GMX)
w_scd 1.0

# (string) Provide file name for gas phase coordinates.
# used in: Condensed phase properties (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
gas_coords None

# (int) Number of time steps for the gas equilibration run, if different from default.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
gas_eq_steps 10000

# (float) Time interval for saving coordinates for the gas production run (if zero, use default in external script.)
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
gas_interval 0.1

# (int) Number of time steps for the gas production run, if different from default.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
gas_md_steps 100000

# (float) Time step size for the gas simulation (if zero, use default in external script.).
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
gas_timestep 1.0

# (string) Provide file name for condensed phase coordinates.
# used in: Condensed phase properties (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_coords None

# (int) Number of time steps for the liquid equilibration run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_eq_steps 1000

# (float) Step size for finite difference derivatives for liquid targets in pure_num_grad
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_fdiff_h 0.01

# (float) Time interval for saving coordinates for the liquid production run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_interval 0.1

# (int) Number of time steps for the liquid production run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_md_steps 10000

# (float) Time step size for the liquid simulation.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
liquid_timestep 1.0

# (int) Provide the number of molecules in the structure (defaults to auto-detect).
# used in: Condensed phase properties (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
n_molecules -1

# (string) Provide file name for condensed phase NVT coordinates.
# used in: Condensed phase properties (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nvt_coords None

# (int) Number of time steps for the liquid NVT equilibration run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nvt_eq_steps 10000

# (float) Time interval for saving coordinates for the NVT simulation production run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nvt_interval 0.1

# (int) Number of time steps for the liquid NVT production run.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nvt_md_steps 100000

# (float) Time step size for the NVT simulation.
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nvt_timestep 1.0

# (float) Weight of energy
# used in: Ab initio targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
w_energy 1.0

# (float) Weight of atomistic forces
# used in: Ab initio targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
w_force 1.0

# (float) Weight of surface tension
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
w_surf_ten 0.0

# (bool) Minimize the energy of the system prior to running dynamics
# used in: Condensed phase property targets (advanced usage) (Liquid_OpenMM)
minimize_energy 1

# (int) Number of steps in the liquid simulation between MC barostat volume adjustments.
# used in: Liquid properties in OpenMM (Liquid_OpenMM)
n_mcbarostat 25

# (bool) Perform a geometry optimization before computing properties
# used in: Monomer properties (Moments_GMX, Moments_OpenMM, Moments_TINKER)
optimize_geometry 1

# (int) Number of time steps for the equilibration run.
# used in: Thermodynamic property targets (Thermo_GMX)
eq_steps 20000

# (string) Text file containing experimental data.
# used in: Thermodynamic properties target (Thermo_GMX)
expdata_txt expset.txt

# (int) Number of time steps for the production run.
# used in: Thermodynamic property targets (Thermo_GMX)
md_steps 50000

# (int) Number of simulations required to calculate quantities.
# used in: Thermodynamic property targets (Thermo_GMX)
n_sim_chain 1

# (float) Frequency normalization (in wavenumber) for vibrational frequencies
# used in: Vibrational frequency targets (Vibration_AMBER, Vibration_GMX, Vibration_TINKER)
wavenumber_tol 10.0

# (float) Cutoff for nonbonded interactions (passed to engines).
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
nonbonded_cutoff None

# (float) Cutoff for vdW interactions if different from other nonbonded interactions
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
vdw_cutoff None

# (int) Whether to save trajectories.  0 = Never save; 1 = Delete if optimization step is good; 2 = Always save
# used in: Condensed phase properties ()
save_traj 0

# (string) Name of frcmod file to pass to tleap when setting up AMBER simulations.
# used in: Targets that use AMBER (AbInitio_AMBER, Interaction_AMBER, Vibration_AMBER)
amber_frcmod None

# (string) File containing commands for "tleap" when setting up AMBER simulations.
# used in: Targets that use AMBER (AbInitio_AMBER, Interaction_AMBER, Vibration_AMBER)
amber_leapcmd None

# (string) Name of mol2 file to pass to tleap when setting up AMBER simulations.
# used in: Targets that use AMBER (AbInitio_AMBER, Interaction_AMBER, Vibration_AMBER)
amber_mol2 None

# (string) Gromacs .mdp files.  If not provided, will search for default.
# used in: Targets that use GROMACS (AbInitio_GMX, BindingEnergy_GMX, Interaction_GMX, Lipid_GMX, Liquid_GMX, Moments_GMX, Thermo_GMX, Vibration_GMX)
gmx_mdp None

# (string) Gromacs .ndx files.  If not provided, will search for default.
# used in: Targets that use GROMACS (AbInitio_GMX, BindingEnergy_GMX, Interaction_GMX, Lipid_GMX, Liquid_GMX, Moments_GMX, Thermo_GMX, Vibration_GMX)
gmx_ndx None

# (string) Gromacs .top files.  If not provided, will search for default.
# used in: Targets that use GROMACS (AbInitio_GMX, BindingEnergy_GMX, Interaction_GMX, Lipid_GMX, Liquid_GMX, Moments_GMX, Thermo_GMX, Vibration_GMX)
gmx_top None

# (string) OpenMM platform.  Choose either Reference, CUDA or OpenCL.  AMOEBA is on Reference or CUDA only.
# used in: Targets that use OpenMM (AbInitio_OpenMM, BindingEnergy_OpenMM, Hydration_OpenMM, Interaction_OpenMM, Liquid_OpenMM, Moments_OpenMM)
openmm_platform None

# (string) Precision of OpenMM calculation if using CUDA or OpenCL platform.  Choose either single, double or mixed ; defaults to the OpenMM default.
# used in: Targets that use OpenMM (AbInitio_OpenMM, BindingEnergy_OpenMM, Hydration_OpenMM, Interaction_OpenMM, Liquid_OpenMM, Moments_OpenMM)
openmm_precision None

# (string) PDB file mainly used for building OpenMM systems but can also contain coordinates.
# used in: Targets that use OpenMM (AbInitio_OpenMM, BindingEnergy_OpenMM, Hydration_OpenMM, Interaction_OpenMM, Liquid_OpenMM, Moments_OpenMM)
pdb None

# (string) Text file containing quantum data.  If not provided, will search for a default (qdata.txt).
# used in: Energy/force matching, ESP evaluations, interaction energies (AbInitio_TINKER, BindingEnergy_TINKER, Interaction_TINKER, Liquid_TINKER, Moments_TINKER, Vibration_TINKER)
qdata_txt None

# (string) TINKER .key files.  If not provided, will search for default.
# used in: Targets that use TINKER (AbInitio_TINKER, BindingEnergy_TINKER, Interaction_TINKER, Liquid_TINKER, Moments_TINKER, Vibration_TINKER)
tinker_key None

# (string) Coordinates for single point evaluation; if not provided, will search for a default.
# used in: Energy/force matching, ESP evaluations, interaction energies
coords None

# (bool) When running remote target, back up files at the remote location.
# used in: Liquid, lipid and remote targets ()
remote_backup 0

# (bool) Compute all energies and forces in one fell swoop where possible(as opposed to calling the simulation code once per snapshot)
# used in: Various QM targets and MD codes (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
all_at_once 1

# (bool) Average over all atoms when normalizing force errors.
# used in: Force matching (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
force_average 0

# (bool) For OpenMM or other codes with Python interface: Compute energies and forces internally
# used in: OpenMM interface (AbInitio_OpenMM, BindingEnergy_OpenMM, Hydration_OpenMM, Interaction_OpenMM, Liquid_OpenMM, Moments_OpenMM)
run_internal 1

# (bool) Pure numerical gradients -- launch two additional simulations for each perturbed forcefield parameter, and compute derivatives using 3-point formula. (This is very expensive and should only serve as a sanity check)
pure_num_grad 0

# (int) Wait a number of seconds every time this target is visited (gives me a chance to ctrl+C)
# used in: All targets (advanced usage)
sleepy 0

# (float) Simulation temperature for hydration free energies (atm)
# used in: Hydration free energy using molecular dynamics (Hydration_OpenMM)
hfe_pressure 1.0

# (float) Simulation temperature for hydration free energies (Kelvin)
# used in: Hydration free energy using molecular dynamics (Hydration_OpenMM)
hfe_temperature 298.15

# (list) The parameter types that are differentiated using finite difference
# used in: In conjunction with fdgrad, fdhess, fdhessdiag; usually not needed
fd_ptypes []

# (bool) Finite difference gradient of objective function w/r.t. specified parameters
# used in: Use together with fd_ptypes (advanced usage)
fdgrad 0

# (bool) Finite difference Hessian of objective function w/r.t. specified parameters
# used in: Use together with fd_ptypes (advanced usage)
fdhess 0

# (bool) Finite difference Hessian diagonals w/r.t. specified parameters (costs 2np times a objective calculation)
# used in: Use together with fd_ptypes (advanced usage)
fdhessdiag 0

# (bool) Enable anisotropic box scaling (e.g. for crystals or two-phase simulations) in external npt.py script
# used in: Condensed phase property targets (advanced usage) ()
anisotropic_box 0

# (bool) Divide objective function by the number of snapshots / vibrations
# used in: Interaction energy / vibrational mode targets ()
normalize 0

# (bool) When matching energies in AbInitio, do not subtract the mean energy gap.
# used in: Energy matching (advanced usage) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
absolute 0

# (float) RESP "a" parameter for strength of penalty; 0.001 is strong, 0.0005 is weak
# used in: Ab initio targets with RESP (advanced usage) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
resp_a 0.001

# (float) RESP "b" parameter for hyperbolic behavior; 0.1 is recommended
# used in: Ab initio targets with RESP (advanced usage) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
resp_b 0.1

# (float) Weight of RESP
# used in: Ab initio targets with RESP (advanced usage) (AbInitio_AMBER, AbInitio_GMX, AbInitio_Internal, AbInitio_OpenMM, AbInitio_TINKER)
w_resp 0.0

# (bool) Don't target the average enthalpy of vaporization and allow it to freely float (experimental)
# used in: Condensed phase property targets (advanced usage) (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
hvap_subaverage 0

# (bool) Give the user a chance to fill in condensed phase stuff on the zeroth step
# used in: Condensed phase property targets (advanced usage) (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
manual 0

# (float) Polarizability parameter for self-polarization correction (in debye).
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
self_pol_alpha 0.0

# (float) Gas-phase dipole parameter for self-polarization correction (in debye).
# used in: Condensed phase property targets (Liquid_GMX, Liquid_OpenMM, Liquid_TINKER)
self_pol_mu0 0.0

# (bool) Force the external npt.py script to crash if CUDA Platform not available
# used in: Condensed phase property targets (advanced usage) (Liquid_OpenMM)
force_cuda 0

# (bool) Enable multiple-timestep integrator in external npt.py script
# used in: Condensed phase property targets (advanced usage) (Liquid_OpenMM)
mts_integrator 0

# (bool) Call Q-Chem to do MM COSMO on MM snapshots.
# used in: Currently unused, but possible in AbInitio target
do_cosmo 0

# (float) Snapshots with (E_MM - E_QM) < 0.0 will have their weights increased by this factor.
# used in: Ab initio targets
energy_asymmetry 1.0

# (float) Gradient below this threshold will be set to zero.
# used in: All targets
epsgrad 0.0

# (bool) Enable the RESP objective function
# used in: Ab initio targets with RESP; experimental (remember to set espweight)
resp 0

# (string) Reassign modes before fitting frequencies, using either linear assignment "permute" or maximum overlap "overlap".
# used in: Vibrational frequency targets (Vibration_AMBER, Vibration_GMX, Vibration_TINKER)
reassign_modes None
$end
