#==================================================#
#    Script to render sets of vectors on atoms     #
#              Lee-Ping Wang (05-2012)             #
#                                                  #
# In order to provide an improved visualization of #
# force matching, this script takes any number of  #
# coordinate files as input (but they must contain #
# the same number of frames and atoms.)            #
#                                                  #
# The first coordinate file is for the actual      #
# coordinates of the geometries that we're viewing #
# the forces for.                                  #
#                                                  #
# The second and subsequent coordinate files       #
# contain the forces.  Vectors must be scaled to   #
# order one.  The absolute magnitude of vectors    #
# don't matter but their relative magnitude does,  #
# and should be consistent across multiple force   #
# sets. (ForceBalance will print the force files   #
# so hopefully the user won't have to care.)       #
# In the force files, the maximum of any force     #
# across the whole set should be scaled to 1A.     #
#                                                  #
# Typical usage: vmd -e drawforces.vmd -args       #
# atoms.gro QMforce.xyz MMforce.xyz                #
#                                                  #
# I haven't fully treated the problem with virtual #
# sites yet, and I'll address that later.  That    #
# is to say. atoms.gro should contain only real    #
# atoms and not virtual sites.                     #
#==================================================#

#==================================================#
#           Global settings for display            #
#==================================================#
axes location Off
display rendermode GLSL
display projection Orthographic
display depthcue off
color Display Background white
display nearclip set 0.010000
material change opacity Ghost 0.000000
set colors "blue2 orange3 green red violet"

material change outlinewidth Steel 0.8
material change outline      Steel 4.0
material change opacity      Steel 1.0
material change shininess    Steel 1.0
material change specular     Steel 1.0
material change diffuse      Steel 1.0
material change ambient      Steel 0.0

#==================================================#
#            define drawing functions              #
#==================================================#

proc min {x y} {expr {$x<$y? $x: $y}}

# draw a whole list of vectors. a convenience functions to draw a
# lot of vectors easily.
# field has to be a list of pairs of xyz triples (center and vector).
# the function returns a list of the graphics ids for easy deletion.
proc vmd_draw_vector {mol cnt vec {scale 1.0} {res 35} {radius 0.05}} {
    global cid

    set camz [lindex [lindex [molinfo 0 get view_matrix] 0] 2]

    lappend x1 [ lindex $camz 0 ]
    lappend x1 [ lindex $camz 1 ]
    lappend x1 [ lindex $camz 2 ]
    set x1 [ vecscale $x1 [ expr 1 / [veclength $x1]]]
    set x2 [ vecscale $vec [ expr 1 / [ veclength $vec ]]]
    set x3 [ veccross $x1 $x2 ]
    set x3 [ vecscale $x3 [ expr 1 / [veclength $x3]]]

    set vechalf [vecscale [expr $scale *0.5] $vec]
    set veczero [vecscale [expr $scale *0.0] $vec]
    set vecfull [vecscale [expr $scale *1.0] $vec]

    # Offset the vectors by a little bit so they can both be seen.
    # Choose a direction that is normal to the present vector.
    set offset [ vecscale $x3 [expr [expr $cid - 0.5] * 0.05] ]
    set cnt [ vecadd $cnt $offset ]
    set radius [min [expr 0.1 * [veclength $vec]] $radius]
    return [list \
      [graphics $mol cylinder [vecsub $cnt $veczero] \
        [vecadd $cnt [vecscale 0.8 $vecfull]] \
        radius $radius resolution $res filled yes] \
      [graphics $mol cone [vecadd $cnt [vecscale 0.8 $vecfull]] \
   	[vecadd $cnt $vecfull] radius [expr $radius * 1.7] \
	resolution $res]]
}

proc vmd_draw_vecfield {mol field {scale 1.0} {res 35} {radius 0.05}} {
    set gids ""
    foreach i $field {
        lassign $i cnt vec
        append gids " " [vmd_draw_vector $mol $cnt $vec $scale $res $radius]
    }
    return $gids
}

proc do_frcdraw {args} {
    # frcdata has the center and the direction/length of the vector
    # frcgraph has the indices of the vector graphic elements

    global frcdatas frcgraphs nfrc colors cid
    set molid 0
    set na [molinfo 0 get numatoms]
    set frame [molinfo $molid get frame]

    if {[info exists frcdatas($frame)]} then {
	if {[info exists frcgraphs]} then {
            foreach frcgraph $frcgraphs {
	        foreach g $frcgraph {
		    graphics $molid delete $g
                }
	    }
	}
	draw material Steel
        set cid 0
        foreach frcdata $frcdatas($frame) {
            graphics $molid color [ lindex $colors $cid ]
            lappend frcgraphs [vmd_draw_vecfield $molid $frcdata 3.0 35 1.2]
            incr cid
        }
    }
}

proc load_frc {args} {
    puts "Loading forces from xyz file: $args"
    lassign $args fnm
    set viewpoints {}
    set mol [molinfo top]
    # save orientation and zoom parameters
    set viewpoints [molinfo $mol get {
	center_matrix rotate_matrix scale_matrix global_matrix}]

    mol new $fnm waitfor all
    mol off [molinfo top]

    mol top $mol
    molinfo $mol set {center_matrix rotate_matrix \
			  scale_matrix global_matrix} $viewpoints
}

puts "#=================================================================================================#"
puts "#| Usage: Launch VMD with 'vmd -e drawforces.vmd -args coors.xyz forces1.xyz (forces2.xyz ... )' |#"
puts "#|        where EACH forces.xyz has the same number of atoms and frames as coors.xyz             |#"
puts "#|        Or, open VMD and run 'play coors.xyz forces1.xyz (forces2.xyz ... )'                   |#"
puts "#=================================================================================================#"

# Load the molecule in the first argument
set xyzname [lindex $argv 0]
mol new $xyzname waitfor all
mol modmaterial 0 0 Edgy
mol modstyle 0 0 CPK 0.600000 0.200000 25.000000 25.000000

for {set i 1} {$i < [ llength $argv ]} {incr i} {
     load_frc [lindex $argv $i]
}

set n [molinfo 0 get numframes]
set na [molinfo 0 get numatoms]
for {set k 1} {$k < [ llength $argv ]} {incr k} {
    for {set i 0} {$i < $n} {incr i} {
	set frcframe ""
	for {set j 0} {$j < $na} {incr j} {
	    set sel [atomselect 0 "index $j"]
	    set self [atomselect $k "index $j"]
	    $sel frame $i
	    $sel update
	    $self frame $i
	    $self update
	    set x [$sel get x]
	    set y [$sel get y]
	    set z [$sel get z]
	    set fx [$self get x]
	    set fy [$self get y]
	    set fz [$self get z]
	    append frcframe " " [list [list [list $x $y $z] [list $fx $fy $fz]]]
	}
	lappend frcdatas($i) $frcframe
    }
}

set molid 0
# connect to vmd_frame or vmd_logfile
# If we use vmd_logfile, it redraws even when we rotate!
trace variable vmd_frame w do_frcdraw
animate goto 0
